@use "../global" as *;

.overlap-layout02 {
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
    position: relative;
    padding: 50px 0;
}
.overlap02__img {
    width: 50%;
}
.overlap02__text-area {
    width: 50%;
    max-width: 550px;
    padding: 0 60px 0 30px;
}
.overlap02__title {
    margin-bottom: 20px;
    font-weight: bold;
    font-size: 2.5rem;
}


.section__main-visual {
    height: 720px;
    position: relative;
    margin-bottom: 120px;
}
  /*
  テキストとボタンが画像の上に表示されるように「z-index」を設定
  */
.overlap-layout02 .overlap02__text-area {
    position: absolute;
    top: 280px;
    left: 10%;
    z-index: 10;
}
  /*
  「text-shadow」で文字の輪郭に白い影をつけることで、
  文字が背景画像に埋もれないようにする
  */
.overlap02__title {
    color: #333;
    font-size: 2.875rem;
    font-family: Arial, Helvetica, sans-serif;
    font-weight: bold;
    margin-bottom: 30px;
    text-shadow: 0 4px 6px #fff;
}
.main-visual--button {
    background-color: #ff2a2a;
    /* 文字の下に影をつけてボタンに立体感を出す */
    border-bottom: 6px solid #9a0413;
    border-radius: 10px;
    color: #fff;
    font-size: 1.5rem;
    display: block;
    padding: 15px 35px;
    text-align: center;
    transition: 0.3s;
    position: relative;
}
  /*
  ボタンの右矢印
  上と右にボーダーを設定し、「transform: rotate(45deg)」で
  45度回転させることで矢印を作成
  positionで位置を調整する
  */
.main-visual--button::after {
    content: "";
    width: 16px;
    height: 16px;
    border-top: solid 3px #fff;
    border-right: solid 3px #fff;
    transform: rotate(45deg);
    position: absolute;
    top: 26px;
    right: 30px;
}
  /*
  ホバー時は、opacityで透過させながら「transform: scale(1.05);」で
  少しだけボタンのサイズを大きくする
  */
.main-visual--button:hover {
    opacity: 0.9;
    transform: scale(1.05);
}
  /*
  メインビジュアル
  animationを使用して、画像をフェードイン、フェードアウトで切り替えを行う
  
  ※画像のフェード切り替えは、CSSアニメーション以外にも
  jQueryのプラグインを使う等便利なやり方が色々ありますが、
  今回は学習のためにアニメーションを使用しています。
  */
.main-visual__images--list li {
    width: 75%;
    position: absolute;
    top: 0;
    right: 0;
    /* 最初は3枚の画像を非表示にしておく */
    opacity: 0;
    /*
    アニメーションを実行
    fade：下で定義している「@keyframes fade」を実行
    15s：「@keyframes fade」の処理を15秒かけて実行
    infinite：アニメーションの処理を無限に繰り返す
    */
    animation: fade 15s infinite;
}
  /*
  1枚目の画像のアニメーション実行タイミングを設定
  「animation-delay: 0s;」ですぐに実行
  */
.main-visual__images--list li:nth-child(1) {
    animation-delay: 0s;
}
  /*
  2枚目の画像のアニメーション実行タイミングを設定
  「animation-delay: 5s;」で5秒後に実行
  */
.main-visual__images--list li:nth-child(2) {
    animation-delay: 5s;
}
  /*
  3枚目の画像のアニメーション実行タイミングを設定
  「animation-delay: 10s;」で10秒後に実行
  */
.main-visual__images--list li:nth-child(3) {
    animation-delay: 10s;
}
.main-visual__images--list li img {
    width: 100%;
    height: 720px;
    object-fit: cover;
}
  /*
  「box-shadow」で画像のまわりをぼかす
  */
.main-visual__images--list li::after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    box-shadow: inset 0px 0px 20px 20px #fff;
}
  /*
  アニメーション処理
  上の「animation」で15sを指定しているので下記の処理を15秒かけて実行
  0%が0秒を表し、100%が15秒後を表す。
  
  0%の「opacity: 0;」で非表示の状態からスタートし、
  15%になるまでの間に少しづつ画像を表示（フェードイン）させる。
  そこから30%の時点までは画像を表示させたままの状態を維持し、
  45%の時点に向けて画像を非表示（フェードアウト）する。
  そこから100%まで非表示の状態を維持する。
  */
@keyframes fade {
    0% {
        opacity: 0;
    }
    15% {
        opacity: 1;
    }
    30% {
        opacity: 1;
    }
    45% {
        opacity: 0;
    }
    100% {
        opacity: 0;
    }
}
